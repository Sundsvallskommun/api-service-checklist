openapi: 3.0.1
info:
  title: api-checklist
  contact: {}
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
- name: Phase resources
  description: Resources for managing the phases that will be used by all checklists
- name: Checklist resources
  description: Resources for managing checklists
- name: Porting resources
  description: Resources for managing import and export of checklists
- name: Communication resources
  description: Resources for managing communication
- name: Task resources
  description: Resources for managing tasks in a phase
- name: Organization resources
  description: Resources for managing organizational units
- name: Custom sort order resources
  description: Resources for managing custom sort order of checklist phases and tasks
- name: Delegation resources
  description: Resources for managing delegations of employee checklists
- name: Employee checklist resources
  description: Resources for managing employee checklists
paths:
  /{municipalityId}/sortorder/{organizationNumber}:
    put:
      tags:
      - Custom sort order resources
      summary: Creates or replaces a custom sort order of checklist components for
        the provided organisation number
      operationId: saveSortorder
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationNumber
        in: path
        description: Organization number to the organization owning the sort order
        required: true
        schema:
          type: integer
          format: int32
        example: 587
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SortorderRequest"
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "202":
          description: Successful Operation
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/mentor:
    put:
      tags:
      - Employee checklist resources
      summary: Set the mentor
      description: Set the mentor on a specific employee checklist
      operationId: setMentor
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Mentor"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklist"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    delete:
      tags:
      - Employee checklist resources
      summary: Delete the mentor
      description: Delete the mentor on a specific employee checklist
      operationId: deleteMentor
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/phases:
    get:
      tags:
      - Phase resources
      summary: Fetch all phases
      operationId: fetchChecklistPhases
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Phase"
    post:
      tags:
      - Phase resources
      summary: Create a new phase
      operationId: createChecklistPhase
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseCreateRequest"
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/organizations:
    get:
      tags:
      - Organization resources
      summary: "Fetch all organizations, optionally filtered by organization id(s)"
      description: Fetch all organizations
      operationId: fetchOrganizations
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationFilter
        in: query
        description: Filter response to only include organizations matching provided
          organization ids
        required: false
        schema:
          type: array
          items:
            type: integer
            format: int32
        example: 5432
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Organization"
    post:
      tags:
      - Organization resources
      summary: Create an organization
      description: Create a new organizational unit
      operationId: createOrganization
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationCreateRequest"
        required: true
      responses:
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/import/replace/{organizationNumber}/{organizationName}:
    post:
      tags:
      - Porting resources
      summary: "Import checklist structure for a organization, replacing currently\
        \ CREATED or ACTIVE version"
      description: |
        <h3>Only use this resource if you are aware of the impact the result of the operation has on active and completed employee checklists</h3>
        <i>This method is <b>not safe to use</b> in regard to that existing checklists with lifecycle status <b>ACTIVE</b> or <b>CREATED</b> will be replaced. I.e. employee checklists (ongoing and completed) and checklist drafts <u>will be affected</u>.</i>
        The following rules are applied:
        - If no checklist exists for the organizational unit, a new version based on provided structure will be created with lifecycle status <b>CREATED</b> (to activate, use intended endpoint).
        - If an existing version with lifecycle status <b>CREATED</b> is present, it will be replaced with the provided structure (to activate, use intended endpoint). If a version with lifecycle status <b>ACTIVE</b> exists, it will remain intact and no ongoing employee checklists will be affected. Only the currently created version draft will be replaced.
        - If an existing version with lifecycle status <b>ACTIVE</b> is present and no version with status <b>CREATED</b> is present, the active version will be replaced with the provided structure. <b>Observe that all employee checklists (ongoing and completed) using the currently active version will be affected (resetted). Use with uttermost care!</b>.
      operationId: importAndOverwriteExistingChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationNumber
        in: path
        description: Organization number
        required: true
        schema:
          type: integer
          format: int32
        example: 53
      - name: organizationName
        in: path
        description: Organization name
        required: true
        schema:
          type: string
        example: Organization ABC
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Json checklist structure to import
        required: true
      responses:
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/import/add/{organizationNumber}/{organizationName}:
    post:
      tags:
      - Porting resources
      summary: Import checklist structure for a organization as a new version with
        lifecycle status CREATED
      description: |
        <i>This method is safe to use in regard to that no existing checklist(s) with lifecycle status <b>ACTIVE</b> or <b>CREATED</b> will be modified. I.e. employees with active or completed checklists will not be affected.</i>
        <br><br>
        The following rules are applied:
        - If no checklist exists for the organizational unit, a new version based on provided structure will be created with lifecycle status <b>CREATED</b> (to activate, use intended endpoint).
        - If an existing version with lifecycle status <b>CREATED</b> is present, an exception will be thrown as there can only be one checklist with created lifecycle status. Remove current version with created status or use the replace endpoint instead.
        - If an existing version with lifecycle status <b>ACTIVE</b> is present, a new version based on provided structure will be created with lifecycle status <b>CREATED</b> (to activate, use intended endpoint). The currently active version will remain intact and employees with active or completed checklists will not be affected.
      operationId: importChecklistAsNewVersion
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationNumber
        in: path
        description: Organization number
        required: true
        schema:
          type: integer
          format: int32
        example: 53
      - name: organizationName
        in: path
        description: Organization name
        required: true
        schema:
          type: string
        example: Organization ABC
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: Json checklist structure to import
        required: true
      responses:
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/phases/{phaseId}/customtasks:
    post:
      tags:
      - Employee checklist resources
      summary: Create a custom task
      description: Create a custom task connected to a specific employee checklist
      operationId: createCustomTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomTaskCreateRequest"
        required: true
      responses:
        "201":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomTask"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/email:
    post:
      tags:
      - Communication resources
      summary: Send email notification
      description: Send an email notification to the manager for the employee checklist
        that matches provided id
      operationId: sendEmail
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "201":
          description: Successful Operation
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/delegate-to/{email}:
    post:
      tags:
      - Delegation resources
      summary: Delegate an employee checklist
      description: Delegate an employee checklist to a user by email and checklist
        id
      operationId: delegateEmployeeChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: email
        in: path
        description: Email for person to delegate to
        required: true
        schema:
          type: string
        example: delegate.person@noreply.com
      responses:
        "201":
          description: Successful Operation
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/initialize:
    post:
      tags:
      - Employee checklist resources
      summary: Inititalize checklists for new employees
      description: Trigger creation of checklists for all known new employees
      operationId: initiateEmployeeChecklists
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklistResponse"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/initialize/{personId}:
    post:
      tags:
      - Employee checklist resources
      summary: Inititalize checklists for a specific employee
      description: Trigger creation of checklist for employee matching sent in person
        id
      operationId: initiateSpecificEmployeeChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: personId
        in: path
        description: Person id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklistResponse"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/checklists:
    get:
      tags:
      - Checklist resources
      summary: Get all checklists
      operationId: fetchAllChecklists
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Checklist"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    post:
      tags:
      - Checklist resources
      summary: Create a new checklist
      operationId: createChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChecklistCreateRequest"
        required: true
      responses:
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/checklists/{checklistId}/version:
    post:
      tags:
      - Checklist resources
      summary: Create new version of checklist
      operationId: createNewVersion
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/checklists/{checklistId}/phases/{phaseId}/tasks:
    get:
      tags:
      - Task resources
      summary: Fetch all tasks in a checklist phase
      operationId: fetchChecklistPhaseTasks
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
    post:
      tags:
      - Task resources
      summary: Create task in checklist phase
      operationId: createChecklistPhaseTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreateRequest"
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "201":
          description: Successful Operation
          headers:
            Location:
              style: simple
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/phases/{phaseId}:
    get:
      tags:
      - Phase resources
      summary: Fetch single phase
      operationId: fetchChecklistPhase
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phase"
    delete:
      tags:
      - Phase resources
      summary: Delete an existing phase
      operationId: deleteChecklistPhase
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "204":
          description: Successful Operation
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    patch:
      tags:
      - Phase resources
      summary: Update an existing phase
      operationId: updateChecklistPhase
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PhaseUpdateRequest"
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Phase"
  /{municipalityId}/organizations/{organizationId}:
    get:
      tags:
      - Organization resources
      summary: Fetch organization by id
      description: Fetch organization that matches provided id
      operationId: fetchOrganizationById
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationId
        in: path
        description: Organization id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
    delete:
      tags:
      - Organization resources
      summary: Delete organization
      description: Delete an existing organizational unit
      operationId: deleteOrganization
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationId
        in: path
        description: Organization id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "204":
          description: Successful Operation
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "409":
          description: Conflict
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    patch:
      tags:
      - Organization resources
      summary: Update an organization
      description: Update an existing organizational unit
      operationId: updateOrganization
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationId
        in: path
        description: Organization id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrganizationUpdateRequest"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/tasks/{taskId}:
    patch:
      tags:
      - Employee checklist resources
      summary: Update fulfilment of a task
      operationId: updateTaskFulfilment
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeChecklistTaskUpdateRequest"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklistTask"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/phases/{phaseId}:
    patch:
      tags:
      - Employee checklist resources
      summary: Update of all tasks in a phase
      description: Bulk update of sent in attributes for all tasks in phase
      operationId: updateAllTasksInPhase
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeChecklistPhaseUpdateRequest"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklistPhase"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/customtasks/{taskId}:
    get:
      tags:
      - Employee checklist resources
      summary: Read a custom task
      description: Read a custom task connected to a specific employee checklist
      operationId: readCustomTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomTask"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    delete:
      tags:
      - Employee checklist resources
      summary: Delete a custom task
      description: Delete a custom task from an employee checklist
      operationId: deleteCustomTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      responses:
        "204":
          description: Successful Operation
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    patch:
      tags:
      - Employee checklist resources
      summary: Update a custom task
      description: Update a custom task connected to a specific employee checklist
      operationId: updateCustomTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomTaskUpdateRequest"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomTask"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/checklists/{checklistId}:
    get:
      tags:
      - Checklist resources
      summary: Fetch checklist by id
      operationId: fetchChecklistById
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checklist"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    delete:
      tags:
      - Checklist resources
      summary: Delete a checklist
      operationId: deleteChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    patch:
      tags:
      - Checklist resources
      summary: Update a checklist
      operationId: updateChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChecklistUpdateRequest"
        required: true
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checklist"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/checklists/{checklistId}/phases/{phaseId}/tasks/{taskId}:
    get:
      tags:
      - Task resources
      summary: Fetch task in a checklist phase
      operationId: fetchChecklistPhaseTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 55904052-0db0-4622-850c-3273ee60def4
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    delete:
      tags:
      - Task resources
      summary: Delete task in checklist phase
      operationId: deleteChecklistPhaseTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 55904052-0db0-4622-850c-3273ee60def4
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "204":
          description: No Content
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
    patch:
      tags:
      - Task resources
      summary: Update task in checklist phase
      operationId: updateChecklistPhaseTask
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: phaseId
        in: path
        description: Phase id
        required: true
        schema:
          type: string
        example: 9ee6a504-555f-4db7-bf21-2bb8a96f2b85
      - name: taskId
        in: path
        description: Task id
        required: true
        schema:
          type: string
        example: 55904052-0db0-4622-850c-3273ee60def4
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdateRequest"
        required: true
      responses:
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /{municipalityId}/checklists/{checklistId}/activate:
    patch:
      tags:
      - Checklist resources
      summary: Activate checklist
      operationId: activateChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: checklistId
        in: path
        description: Checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checklist"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/export/{organizationNumber}:
    get:
      tags:
      - Porting resources
      summary: Export checklist structure
      description: "Returns complete structure for the checklist matching provided\
        \ organizationNumber. If version if prodvided it will be matched, otherwise\
        \ the latest version will be returned"
      operationId: exportChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: organizationNumber
        in: path
        description: Organization number
        required: true
        schema:
          type: integer
          format: int32
        example: 53
      - name: version
        in: query
        description: Version
        required: false
        schema:
          type: integer
          format: int32
        example: 2
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/correspondence:
    get:
      tags:
      - Communication resources
      summary: Fetch correspondence
      description: Fetch the correspondence that has occured for an employee checklist
      operationId: fetchCorrespondence
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Correspondence"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/manager/{username}:
    get:
      tags:
      - Employee checklist resources
      summary: Fetch checklists where user acts as manager
      description: Fetch a users checklists where the user has the role of manager
      operationId: fetchChecklistsForManager
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: username
        in: path
        description: Username for user to fetch checklists for
        required: true
        schema:
          type: string
        example: usr123
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeChecklist"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/employee/{username}:
    get:
      tags:
      - Employee checklist resources
      summary: Fetch checklist where user acts as employee
      description: Fetch a users checklist where the user has the role of employee
      operationId: fetchChecklistForEmployee
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: username
        in: path
        description: Username for user to fetch checklists for
        required: true
        schema:
          type: string
        example: usr123
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklist"
        "204":
          description: No employee checklist found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmployeeChecklist"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/delegated-to/{username}:
    get:
      tags:
      - Delegation resources
      summary: Fetch all employee checklists delegated to a user
      description: Fetch all delegated employee checklists for the user that matches
        sent in userid
      operationId: fetchDelegatedEmployeeChecklists
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: username
        in: path
        description: Username to fetch delegations for
        required: true
        schema:
          type: string
        example: usr123
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DelegatedEmployeeChecklistResponse"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /api-docs:
    get:
      tags:
      - API
      summary: OpenAPI
      operationId: getApiDocs
      responses:
        "200":
          description: OK
          content:
            application/yaml:
              schema:
                type: string
      x-auth-type: None
      x-throttling-tier: Unlimited
      x-wso2-mutual-ssl: Optional
  /{municipalityId}/employee-checklists/{employeeChecklistId}:
    delete:
      tags:
      - Employee checklist resources
      summary: Delete an employee checklist
      description: Delete an employee checklist completely
      operationId: deleteEmployeeChecklist
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      responses:
        "204":
          description: Successful Operation
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
  /{municipalityId}/employee-checklists/{employeeChecklistId}/delegated-to/{email}:
    delete:
      tags:
      - Delegation resources
      summary: Remove delegation of employee checklist
      description: Remove the delegation of an employee checklist matching sent in
        email and checklist id
      operationId: deleteEmployeeChecklistDelegation
      parameters:
      - name: municipalityId
        in: path
        description: Municipality id
        required: true
        schema:
          type: string
        example: 2281
      - name: employeeChecklistId
        in: path
        description: Employee checklist id
        required: true
        schema:
          type: string
        example: 85fbcecb-62d9-40c4-9b3d-839e9adcfd8c
      - name: email
        in: path
        description: Email for person to remove delegation from
        required: true
        schema:
          type: string
        example: delegate.person@noreply.com
      responses:
        "204":
          description: Successful Operation
        "404":
          description: Not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Problem"
                - $ref: "#/components/schemas/ConstraintViolationProblem"
components:
  schemas:
    PhaseItem:
      required:
      - position
      type: object
      properties:
        id:
          type: string
          description: The id for the item
          writeOnly: true
          example: 283cec0f-b6eb-473c-9dbb-d97a959a8144
        position:
          type: integer
          description: The sort order position for the item
          format: int32
          writeOnly: true
          example: 1
        taskOrder:
          type: array
          description: List containing sort order for the task items connected to
            the phase
          writeOnly: true
          items:
            $ref: "#/components/schemas/TaskItem"
      description: Model for a phase item in the sort order structure
      writeOnly: true
    SortorderRequest:
      type: object
      properties:
        phaseOrder:
          type: array
          description: List containing sort order for phase items
          writeOnly: true
          items:
            $ref: "#/components/schemas/PhaseItem"
      description: Model for custom sort order request
    TaskItem:
      required:
      - position
      type: object
      properties:
        id:
          type: string
          description: The id for the item
          writeOnly: true
          example: 283cec0f-b6eb-473c-9dbb-d97a959a8144
        position:
          type: integer
          description: The sort order position for the item
          format: int32
          writeOnly: true
          example: 1
      description: Model for a task item in the sort order structure
      writeOnly: true
    Problem:
      type: object
      properties:
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
    StatusType:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        reasonPhrase:
          type: string
    ConstraintViolationProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        type:
          type: string
          format: uri
        status:
          $ref: "#/components/schemas/StatusType"
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        title:
          type: string
        message:
          type: string
        instance:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        detail:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    ThrowableProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        message:
          type: string
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        title:
          type: string
        detail:
          type: string
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    Mentor:
      required:
      - name
      - userId
      type: object
      properties:
        userId:
          type: string
          description: The user-id of the mentor
        name:
          type: string
          description: The name of the mentor
      description: Model for a mentor on an employee checklist
    EmployeeChecklist:
      type: object
      properties:
        id:
          type: string
          description: The id of the employee checklist
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        employee:
          $ref: "#/components/schemas/Stakeholder"
        manager:
          $ref: "#/components/schemas/Stakeholder"
        completed:
          type: boolean
          description: Signal if all tasks in the checklist has been completed or
            not
          readOnly: true
        locked:
          type: boolean
          description: Signal if the checklist is locked or not
          readOnly: true
        mentor:
          $ref: "#/components/schemas/Mentor"
        delegatedTo:
          type: array
          description: Contains the email to the delegate(s) if the checklist is delegated
          readOnly: true
          items:
            type: string
            description: Contains the email to the delegate(s) if the checklist is
              delegated
            readOnly: true
        phases:
          type: array
          description: Phases in the checklist
          readOnly: true
          items:
            $ref: "#/components/schemas/EmployeeChecklistPhase"
        created:
          type: string
          description: The created date and time of the checklist
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        updated:
          type: string
          description: The last update date and time of the checklist
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        startDate:
          type: string
          description: The date when the fulfilment of the checklist was started
          format: date
          readOnly: true
          example: 2023-11-22
        endDate:
          type: string
          description: The date when the fulfilment of the checklist was finished
          format: date
          readOnly: true
          example: 2023-11-22
        expirationDate:
          type: string
          description: The expiration date of the checklist
          format: date
          readOnly: true
          example: 2023-11-22
      description: Model for a employee specific checklist
    EmployeeChecklistPhase:
      type: object
      properties:
        id:
          type: string
          description: The id of the phase
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        name:
          type: string
          description: The name of the phase
          readOnly: true
          example: Första veckan
        bodyText:
          type: string
          description: The body text of the phase
          readOnly: true
          example: Detta är en beskrivning av vad som ska göras under första veckan
        timeToComplete:
          type: string
          description: The time to complete the phase
          readOnly: true
          example: P1M
        sortOrder:
          type: integer
          description: The sort order for the phase
          format: int32
          readOnly: true
          example: 1
        tasks:
          type: array
          description: Tasks in the phase
          readOnly: true
          items:
            $ref: "#/components/schemas/EmployeeChecklistTask"
      description: Model for a employee checklist phase
    EmployeeChecklistTask:
      type: object
      properties:
        id:
          type: string
          description: The id of the task
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        heading:
          type: string
          description: The heading of the task
          readOnly: true
          example: Bjud på fika
        text:
          type: string
          description: The body text of the task
          readOnly: true
          example: Detta är en beskrivning av ett uppdrag
        sortOrder:
          type: integer
          description: The sort order for the task
          format: int32
          readOnly: true
        roleType:
          $ref: "#/components/schemas/RoleType"
        questionType:
          $ref: "#/components/schemas/QuestionType"
        customTask:
          type: boolean
          description: Tells if the task is only applies to the current checklist
            or not
          readOnly: true
        responseText:
          type: string
          description: The task response text
          readOnly: true
          example: Jag har bjudit på fika
        fulfilmentStatus:
          $ref: "#/components/schemas/FulfilmentStatus"
        updated:
          type: string
          description: The date and time the task was last updated
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        updatedBy:
          type: string
          description: Identifier for the person that last updated the task
          readOnly: true
          example: joe01doe
      description: Model for a employee checklist task
    FulfilmentStatus:
      type: string
      description: The status of the task fulfilment
      readOnly: true
      example: "TRUE"
      enum:
      - EMPTY
      - "TRUE"
      - "FALSE"
    QuestionType:
      type: string
      description: The question type of the task
      readOnly: true
      enum:
      - YES_OR_NO
      - YES_OR_NO_WITH_TEXT
      - COMPLETED_OR_NOT_RELEVANT
      - COMPLETED_OR_NOT_RELEVANT_WITH_TEXT
    RoleType:
      type: string
      description: The role type of the task
      readOnly: true
      enum:
      - NEW_EMPLOYEE
      - NEW_MANAGER
      - MANAGER_FOR_NEW_EMPLOYEE
      - MANAGER_FOR_NEW_MANAGER
    Stakeholder:
      type: object
      properties:
        id:
          type: string
          description: The person id for the stakeholder
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        firstName:
          type: string
          description: The first name for the stakeholder
          readOnly: true
          example: John
        lastName:
          type: string
          description: The last name for the stakeholder
          readOnly: true
          example: Doe
        email:
          type: string
          description: The email address for the stakeholder
          readOnly: true
          example: email.address@noreply.com
        username:
          type: string
          description: The username for the stakeholder
          readOnly: true
          example: abc12def
        title:
          type: string
          description: The job title for the stakeholder (if applicable)
          readOnly: true
          example: Skoladministratör (Sundsvalls kommun)
      description: Model for a stakeholder (employee or manager) to an employee checklist
      readOnly: true
    Permission:
      type: string
      description: The permission needed to administrate the phase
      writeOnly: true
      enum:
      - SUPERADMIN
      - ADMIN
    PhaseCreateRequest:
      required:
      - createdBy
      - name
      - permission
      - sortOrder
      type: object
      properties:
        name:
          type: string
          description: The name of the phase
          writeOnly: true
          example: Första veckan
        bodyText:
          type: string
          description: The body text of the phase
          writeOnly: true
          example: Detta är en beskrivning av vad som ska göras under första veckan
        timeToComplete:
          type: string
          description: The time to complete the phase
          writeOnly: true
          example: P1M
        permission:
          $ref: "#/components/schemas/Permission"
        sortOrder:
          type: integer
          description: The sort order of the phase
          format: int32
          writeOnly: true
          example: 1
        createdBy:
          type: string
          description: The id of the user creating the phase
      description: Model for phase create request
    CommunicationChannel:
      type: string
      description: Valid channels to use when communicating with the organization
      writeOnly: true
      enum:
      - EMAIL
      - NO_COMMUNICATION
    OrganizationCreateRequest:
      required:
      - organizationName
      - organizationNumber
      type: object
      properties:
        organizationName:
          type: string
          description: The name of the unit
          writeOnly: true
          example: Sundsvall Energi
        organizationNumber:
          type: integer
          description: The organization number of the unit
          format: int32
          writeOnly: true
          example: 5345
        communicationChannels:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: "#/components/schemas/CommunicationChannel"
      description: Model for organizational unit create request
    CustomTaskCreateRequest:
      required:
      - createdBy
      - heading
      - questionType
      - sortOrder
      type: object
      properties:
        heading:
          type: string
          description: The heading of the task
          writeOnly: true
          example: Bjud på fika
        text:
          type: string
          description: The body text of the task
          writeOnly: true
          example: Detta är en beskrivning av ett uppdrag
        questionType:
          $ref: "#/components/schemas/QuestionType"
        sortOrder:
          type: integer
          description: The sort order for the task
          format: int32
          writeOnly: true
        createdBy:
          type: string
          description: The id of the user creating the custom task
      description: Model for custom task create request
    CustomTask:
      type: object
      properties:
        id:
          type: string
          description: The id of the task
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        heading:
          type: string
          description: The heading of the task
          readOnly: true
          example: Bjud på fika
        text:
          type: string
          description: The body text of the task
          readOnly: true
          example: Detta är en beskrivning av ett uppdrag
        sortOrder:
          type: integer
          description: The sort order for the task
          format: int32
          readOnly: true
        roleType:
          $ref: "#/components/schemas/RoleType"
        questionType:
          $ref: "#/components/schemas/QuestionType"
        created:
          type: string
          description: The date and time the task was created
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        updated:
          type: string
          description: The date and time the task was last updated
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        lastSavedBy:
          type: string
          description: The id of the user that last modified the custom task
      description: Model for custom task
    Detail:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/StatusType"
        information:
          type: string
          description: Descriptive text for of the creation outcome
          readOnly: true
          example: Employee with loginname abc123 processed successfully.
      description: Model for employee checklist triggering detailed status
    EmployeeChecklistResponse:
      type: object
      properties:
        summary:
          type: string
          description: Summary for execution
          readOnly: true
          example: Successful execution
        details:
          type: array
          description: Details for each user specific creation
          readOnly: true
          items:
            $ref: "#/components/schemas/Detail"
      description: Model for employee checklist triggering response
    ChecklistCreateRequest:
      required:
      - createdBy
      - displayName
      - name
      - organizationNumber
      type: object
      properties:
        name:
          type: string
          description: The name of the checklist
          example: Checklist_A
        displayName:
          type: string
          description: The display name of the checklist
          example: Display name
        organizationNumber:
          type: integer
          description: The organization that the checklist is created for
          format: int32
          example: 11
        createdBy:
          type: string
          description: The id of the user creating the checklist
      description: Model for checklist create request
    TaskCreateRequest:
      required:
      - createdBy
      - heading
      - permission
      - questionType
      - roleType
      - sortOrder
      type: object
      properties:
        heading:
          type: string
          description: The name of the task
          writeOnly: true
          example: Name of the task
        text:
          type: string
          description: The body text of the task
          writeOnly: true
          example: Body text of the task
        sortOrder:
          type: integer
          description: The sort order of the task
          format: int32
          writeOnly: true
          example: 1
        roleType:
          $ref: "#/components/schemas/RoleType"
        permission:
          $ref: "#/components/schemas/Permission"
        questionType:
          $ref: "#/components/schemas/QuestionType"
        createdBy:
          type: string
          description: The id of the user creating the task
      description: Model for task create request
    PhaseUpdateRequest:
      required:
      - updatedBy
      type: object
      properties:
        name:
          type: string
          description: The name of the phase
          writeOnly: true
          example: Första veckan
        bodyText:
          type: string
          description: The body text of the phase
          writeOnly: true
          example: Detta är en beskrivning av vad som ska göras under första veckan
        timeToComplete:
          type: string
          description: The time to complete the phase
          writeOnly: true
          example: P1M
        permission:
          $ref: "#/components/schemas/Permission"
        sortOrder:
          type: integer
          description: The sort order of the phase
          format: int32
          writeOnly: true
          example: 1
        updatedBy:
          type: string
          description: The id of the user updating the phase
      description: Model for phase update request
    Phase:
      type: object
      properties:
        id:
          type: string
          description: The id of the phase
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        name:
          type: string
          description: The name of the phase
          readOnly: true
          example: Första veckan
        bodyText:
          type: string
          description: The body text of the phase
          readOnly: true
          example: Detta är en beskrivning av vad som ska göras under första veckan
        timeToComplete:
          type: string
          description: The time to complete the phase
          readOnly: true
          example: P1M
        permission:
          $ref: "#/components/schemas/Permission"
        sortOrder:
          type: integer
          description: The sort order of the phase
          format: int32
          readOnly: true
          example: 1
        tasks:
          type: array
          description: Tasks in the phase
          readOnly: true
          items:
            $ref: "#/components/schemas/Task"
        created:
          type: string
          description: The created date and time of the phase
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        updated:
          type: string
          description: The last update date and time of the phase
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        lastSavedBy:
          type: string
          description: The id of the user that last modified the phase
      description: Model for a phase
    Task:
      type: object
      properties:
        id:
          type: string
          description: The id of the task
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        heading:
          type: string
          description: The heading of the task
          readOnly: true
          example: Bjud på fika
        text:
          type: string
          description: The body text of the task
          readOnly: true
          example: Detta är en beskrivning av ett uppdrag
        sortOrder:
          type: integer
          description: The sort order of the task
          format: int32
          readOnly: true
          example: 1
        roleType:
          $ref: "#/components/schemas/RoleType"
        questionType:
          $ref: "#/components/schemas/QuestionType"
        permission:
          $ref: "#/components/schemas/Permission"
        created:
          type: string
          description: The date and time the task was created
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        updated:
          type: string
          description: The date and time the task was last updated
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        lastSavedBy:
          type: string
          description: The id of the user that last modified the task
      description: Task model
    OrganizationUpdateRequest:
      type: object
      properties:
        organizationName:
          type: string
          description: The name of the unit
          nullable: true
          writeOnly: true
          example: Sundsvall Energi
        communicationChannels:
          uniqueItems: true
          type: array
          writeOnly: true
          items:
            $ref: "#/components/schemas/CommunicationChannel"
      description: Model for organizational unit update request
    Checklist:
      type: object
      properties:
        id:
          type: string
          description: The id of the checklist
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        name:
          type: string
          description: The name of the checklist
          readOnly: true
          example: Checklist_A
        displayName:
          type: string
          description: The display name of the checklist
          readOnly: true
          example: Display name
        version:
          type: integer
          description: The version of the checklist
          format: int32
          readOnly: true
          example: 1
        lifeCycle:
          $ref: "#/components/schemas/LifeCycle"
        created:
          type: string
          description: The created date and time of the checklist
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        updated:
          type: string
          description: The last update date and time of the checklist
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+03:00
        lastSavedBy:
          type: string
          description: The id of the user that last modified the checklist
        phases:
          type: array
          description: Phases in the checklist
          readOnly: true
          items:
            $ref: "#/components/schemas/Phase"
      description: Model for checklist
      readOnly: true
    LifeCycle:
      type: string
      description: The lifecycle of the checklist
      readOnly: true
      enum:
      - CREATED
      - ACTIVE
      - DEPRECATED
      - RETIRED
    Organization:
      type: object
      properties:
        id:
          type: string
          description: The id of the unit
          readOnly: true
          example: 5a6c3e4e-c320-4006-b448-1fd4121df828
        organizationName:
          type: string
          description: The name of the unit
          readOnly: true
          example: Sundsvall Energi
        organizationNumber:
          type: integer
          description: The organization number of the unit
          format: int32
          readOnly: true
          example: 5345
        checklists:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Checklist"
        communicationChannels:
          uniqueItems: true
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/CommunicationChannel"
        created:
          type: string
          description: The date and time the unit was created
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+02:00
        updated:
          type: string
          description: The date and time the unit was updated
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+02:00
      description: Model for an organizational unit
    EmployeeChecklistTaskUpdateRequest:
      required:
      - updatedBy
      type: object
      properties:
        fulfilmentStatus:
          $ref: "#/components/schemas/FulfilmentStatus"
        responseText:
          type: string
          description: The response text for the task fulfilment
          nullable: true
          writeOnly: true
          example: Har bjudit på fika
        updatedBy:
          type: string
          description: Identifier for the person that is performing the update
          writeOnly: true
          example: joe01doe
      description: Model for update request of fulfilment for a task
    EmployeeChecklistPhaseUpdateRequest:
      required:
      - updatedBy
      type: object
      properties:
        tasksFulfilmentStatus:
          $ref: "#/components/schemas/FulfilmentStatus"
        updatedBy:
          type: string
          description: Identifier for the person that is performing the update
          writeOnly: true
          example: joe01doe
      description: Model for update request on an employee checklist phase
    CustomTaskUpdateRequest:
      required:
      - updatedBy
      type: object
      properties:
        heading:
          type: string
          description: The heading of the task
          example: Bjud på fika
        text:
          type: string
          description: The body text of the task
          example: Detta är en beskrivning av ett uppdrag
        questionType:
          $ref: "#/components/schemas/QuestionType"
        sortOrder:
          type: integer
          description: The sort order for the task
          format: int32
          writeOnly: true
        updatedBy:
          type: string
          description: The id of the user updating the custom task
      description: Model for custom task update request
    ChecklistUpdateRequest:
      required:
      - updatedBy
      type: object
      properties:
        displayName:
          type: string
          description: The name of the checklist
          example: New display name
        updatedBy:
          type: string
          description: The id of the user updating the checklist
      description: Model for checklist update request
    TaskUpdateRequest:
      required:
      - updatedBy
      type: object
      properties:
        heading:
          type: string
          description: The name of the task
          writeOnly: true
        text:
          type: string
          description: The body text of the task
          writeOnly: true
        sortOrder:
          type: integer
          description: The sort order of the task
          format: int32
          writeOnly: true
          example: 1
        roleType:
          $ref: "#/components/schemas/RoleType"
        permission:
          $ref: "#/components/schemas/Permission"
        questionType:
          $ref: "#/components/schemas/QuestionType"
        updatedBy:
          type: string
          description: The id of the user updating the task
      description: Model for task update request
    Correspondence:
      type: object
      properties:
        messageId:
          type: string
          description: Id for message
          readOnly: true
          example: 3fa85f64-5717-4562-b3fc-2c963f66afa6
        recipient:
          type: string
          description: Message recipient
          readOnly: true
          example: email.address@noreply.com
        attempts:
          type: integer
          description: Attempt count
          format: int32
          readOnly: true
          example: 1
        correspondenceStatus:
          $ref: "#/components/schemas/CorrespondenceStatus"
        communicationChannel:
          $ref: "#/components/schemas/CommunicationChannel"
        sent:
          type: string
          description: Timestamp when message was sent
          format: date-time
          readOnly: true
          example: 2023-11-22T15:30:00+02:00
      description: Model for correspondence
    CorrespondenceStatus:
      type: string
      description: Status for correspondence
      readOnly: true
      enum:
      - SENT
      - NOT_SENT
      - ERROR
      - WILL_NOT_SEND
    DelegatedEmployeeChecklistResponse:
      type: object
      properties:
        employeeChecklists:
          type: array
          description: Delegated employee checklists
          readOnly: true
          items:
            $ref: "#/components/schemas/EmployeeChecklist"
      description: Model for delegated employee checklist response
  securitySchemes: {}